generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @db.Uuid
  email            String          @unique
  password         String
  firstName        String
  lastName         String
  role             Role            @default(USER)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  comments         Comment[]
  assignedProjects ProjectMember[] @relation("ProjectAssigner")
  projects         ProjectMember[]
  ownedProjects    Project[]
  assignedTasks    Task[]          @relation("TaskAssignee")
  createdTasks     Task[]          @relation("TaskCreator")

  @@map("users")
}

model Project {
  id          String          @id @db.Uuid
  name        String
  description String?
  ownerId     String          @db.Uuid
  status      ProjectStatus   @default(ACTIVE)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  members     ProjectMember[]
  owner       User            @relation(fields: [ownerId], references: [id])
  tasks       Task[]

  @@map("projects")
}

model ProjectMember {
  id           String            @id @db.Uuid
  userId       String            @db.Uuid
  projectId    String            @db.Uuid
  role         ProjectMemberRole @default(WORKER)
  assignedAt   DateTime          @default(now())
  assignedById String            @db.Uuid

  assignedBy   User     @relation("ProjectAssigner", fields: [assignedById], references: [id])
  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@map("project_members")
}

model Task {
  id          String     @id @db.Uuid
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Priority   @default(MEDIUM)
  creatorId   String     @db.Uuid
  assigneeId  String?    @db.Uuid
  projectId   String     @db.Uuid
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  comments    Comment[]
  assignee    User?      @relation("TaskAssignee", fields: [assigneeId], references: [id])
  creator     User       @relation("TaskCreator", fields: [creatorId], references: [id])
  project     Project    @relation(fields: [projectId], references: [id])

  @@map("tasks")
}

model Comment {
  id        String   @id @db.Uuid
  content   String
  authorId  String   @db.Uuid
  taskId    String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
  task      Task     @relation(fields: [taskId], references: [id])

  @@map("comments")
}

enum Role {
  ADMIN
  USER
}

enum ProjectStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ProjectMemberRole {
  WORKER
  MANAGER
}
